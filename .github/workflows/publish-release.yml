on:
  push:
    tags:
      - "v*" # Push events to matching `v*` version srings. e.g. v1.0, v20.15.10

name: Create and Publish Release

jobs:
  apps:
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: [3.9]
        platform: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install packages
        run: |
          pip install .[qa]
          pip install pyinstaller
      - name: Build executables
        run: |
          pyinstaller gftools.spec
      - name: zip filename
        id: zip-name
        shell: bash
        run: |
          run: echo "ZIP_NAME=$(echo '${{ RUNNER_OS }}'-binaries" >> $GITHUB_ENV
    - name: Archive artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ZIP_NAME }}
        path: |
          dist/*
        outputs:
          zip_name: ${{ env.ZIP_NAME }}
  build:
    name: Create and Publish Release
    runs-on: ubuntu-latest
    needs:
      - apps

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install release dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools wheel twine

      - name: Get release notes
        id: release_notes
        run: |
          # By default, GH Actions checkout will only fetch a single commit.
          # For us to extract the release notes, we need to fetch the tags
          # and tag annotations as well.
          # https://github.com/actions/checkout/issues/290
          git fetch --tags --force
          TAG_NAME=${GITHUB_REF/refs\/tags\//}
          echo "$(git tag -l --format='%(contents)' $TAG_NAME)" > "${{ runner.temp }}/CHANGELOG.md"

      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body_path: "${{ runner.temp }}/CHANGELOG.md"
          draft: false
          prerelease: false

      - name: Build and publish to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python setup.py sdist bdist_wheel
          twine upload dist/gftools*
      outputs:
        zip_name: ${{ env.ZIP_NAME }}

  attach:
    # only run if the commit is tagged...
    if: github.event_name == 'release'
    # ... and it builds successfully
    needs:
      - build
    runs-on: ubuntu-latest
    env:
      ZIP_NAME: ${{ needs.build.outputs.zip_name }}
    steps:
      - uses: actions/checkout@v2
      - name: Download artefact files
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.ZIP_NAME }}
          path: ${{ env.ZIP_NAME }}
      - name: Zip files
        run: zip -r ${{ env.ZIP_NAME }}.zip ${{ env.ZIP_NAME }}
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ env.ZIP_NAME }}.zip
          asset_name: ${{ env.ZIP_NAME }}.zip
          tag: ${{ github.ref }}
          overwrite: true
          body: "Executable binaries"